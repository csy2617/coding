//using single stack
/**
 * @param {string} s
 * @return {string}
 */
var decodeString = function(s) {
    let stack = [];
     let repeatedStr = [];
    for(let i=0; i<s.length;i++){
        if(s[i]!=']'){
            stack.push(s[i]);
        }else{
            let decodedString = ''
            while(stack[stack.length-1]!='['){
                decodedString += stack.pop();
            }
            console.log(stack,decodedString);
            stack.pop();
            let num ='';
            while(!isNaN(stack[stack.length-1])){
                num = stack.pop() + num;
            }
            let total = Number(num);
            while(total> 0){
                for(let j=decodedString.length-1;j>=0;j--){
                    stack.push(decodedString[j]);
                }
                total--;
            }
            }
            
        }
        return stack.join("");
    
};
//using two stacks
/**
 * @param {string} s
 * @return {string}
 */
var decodeString = function(s) {
    let countStack = [];
    let stringStack = [];
    let k=0;
    let currentStr='';
    let currentK=0;
     //tranverse through string s
    for(let i=0; i<s.length;i++){
        if(!isNaN(s[i])){
            k = k* 10 + Number(s[i]);
        }else if(s[i]=='['){
            countStack.push(k);
            k=0;
            stringStack.push(currentStr);
            currentStr='';
        }else if(s[i]==']'){
            let decodedString= stringStack.pop();
            for(let i=countStack.pop();i>0;i--){
                decodedString = decodedString + currentStr;
            }
            currentStr = decodedString;
        }else{
            currentStr += s[i];
        }    
    }
    return currentStr;
    
};
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} targetSum
 * @return {number}
 */
var pathSum = function(root, targetSum) {
    let map = new Map();
    let totalPath=0;
    let totalSum=0;
    dfs =(node, sum) =>{
        if(node!=null){
            sum += node.val;
            //condtion1
            if(sum == targetSum){
                totalPath++;
            }
            //condition2: current sum-target sum, if the remaining exist in the map, means current-remaining will total to target sum
            if(map[sum-targetSum]){
                totalPath+=map[sum-targetSum];
            }

         //update map freqency
            if(map[sum]){
                map[sum]++;
            }else{
                map[sum]=1;
                }
            
        if(node.left){dfs(node.left, sum)};
        if(node.right){dfs(node.right, sum)};

        map[sum]--;
        }
    }
    dfs(root, totalSum);
    return totalPath;
};
//BFS with two queues
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var rightSideView = function(root) {
    let result=[];
    let queue=[];

    if(root==null) return result;
    queue.push(root);
    while(queue.length!=0){
        let size = queue.length;
        for(let i= 0; i < size; i++){
            let n = queue.shift();
            if(i==size-1) result.push(n.val);
            if(n.left!=null){
                queue.push(n.left);
            }
            if(n.right!=null){
                queue.push(n.right);
            }
        }
    }
    return result;
};

//BFS with iterative
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var rightSideView = function(root) {
    if (!root) return [];
    let result=[];
    let stack = [root, 's'];
    while(stack.length>1){
        let node=stack.shift();
        if(node==='s'){
            stack.push('s');
        }else{
            if (node.val !== undefined) {
            if(stack[0]==='s'){
            result.push(node.val);
            }}
            if(node.left) stack.push(node.left);
            if(node.right) stack.push(node.right);
            console.log(result)
        }
    }
    return result;
};
//USing two queue
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxLevelSum = function(root) {
    let result=[];
    let queue=[]
    if(root==null) return 0;
    queue.push(root);
    while(queue.length!=0){
        let size = queue.length;
         
        let sum=0;
        for(let i =0; i < size; i++){
            let n = queue.shift();
            sum+=n.val;
            if(i==size-1){
                result.push(sum);

            } 
            if(n.left!=null){
                queue.push(n.left);
            }
            if(n.right!=null){
                queue.push(n.right);
            }
        }
    }
    let max= result[0];
    let ans=0;
    for(let i=1; i < result.length;i++){
        max = Math.max(max, result[i])
        }
    return result.indexOf(max)+1;
};

//using single queue
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxLevelSum = function(root) {
    let maxSum =Number.MIN_SAFE_INTEGER;
    let currLevel=0, maxLevel=0;
    let queue=[]
    if(root==null) return 0;
    queue.push(root);
    while(queue.length!=0){
        let size = queue.length;
        currLevel++;
        let sum=0;
        for(let i =0; i < size; i++){
            let n = queue.shift();
            sum+=n.val;
            if(i==size-1){
                if(sum>maxSum){
                    maxSum= sum;
                    maxLevel = currLevel;
                }
            } 
            if(n.left!=null){
                queue.push(n.left);
            }
            if(n.right!=null){
                queue.push(n.right);
            }
        }
    }
    // let max= result[0];
    // let ans=0;
    // for(let i=1; i < result.length;i++){
    //     max = Math.max(max, result[i])
    //     }
    // return result.indexOf(max)+1;
    return maxLevel;
};